ty Standard AssetsのWaterProDaytime(NightTime)を利用し、Occlusion CullingをBakeすると、水面の描画がぐちゃぐちゃになることがある。

![circleanimationmuvie](https://github.com/taimiso0319/QiitaPosts/raw/master/Occlusion%20Culling%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%9F%E9%9A%9B%E3%81%AEUnity%20Standard%20Assets%E3%81%AEWater%E3%81%AE%E6%8C%99%E5%8B%95%E3%81%8C%E5%A4%89%E3%81%AA%E6%99%82/images/b6b1046c1ccb15d5925adf2cc5fc8c7f.gif)

## なぜ起こるのか
WaterのAssetは反射表現を作り出すため、専用のカメラを用意してカメラビューを反転させたものをテクスチャマテリアルとして扱っている。
Assetに使われているWater.csの中身を見てみると、毎回新しいCameraコンポーネントを作成して設定を行っているため、Occlusion CullingはTrueとなっている。
そのため、ベイクしたOcclusion Cullingの設定が、Waterようカメラでも働くことで、映り込むべきものが無視されているということになる。

## 解決策
Occlusion CullingがTrueとなっているなら、Falseにするだけで解決する。

```Water.csの220行目
void UpdateCameraModes(Camera src, Camera dest)
```
この関数で生成したカメラコンポーネントの設定を行っている。
主な処理はメインカメラとの同期だが、ここにOcclusion Cullingの設定をFalseにする処理を書き込む。

```Water.csの246行目から
            dest.farClipPlane = src.farClipPlane;
            dest.nearClipPlane = src.nearClipPlane;
            dest.orthographic = src.orthographic;
            dest.fieldOfView = src.fieldOfView;
            dest.aspect = src.aspect;
            dest.orthographicSize = src.orthographicSize;
```
これを、

```Water.csの252行目あたりに追記
            dest.farClipPlane = src.farClipPlane;
            dest.nearClipPlane = src.nearClipPlane;
            dest.orthographic = src.orthographic;
            dest.fieldOfView = src.fieldOfView;
            dest.aspect = src.aspect;
            dest.orthographicSize = search. orthographicSize;
            dest.useOcclusionCulling = false; //追記した部分
```

このようにするだけ。
また、柔軟性を考えるならpublicな変数を作ってInspector等から設定できるようにしても良いかもしれない。

## 結果
なおった。

![circleanimationmuvie](https://github.com/taimiso0319/QiitaPosts/raw/master/Occlusion%20Culling%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%9F%E9%9A%9B%E3%81%AEUnity%20Standard%20Assets%E3%81%AEWater%E3%81%AE%E6%8C%99%E5%8B%95%E3%81%8C%E5%A4%89%E3%81%AA%E6%99%82/images/9a7c6e0fe608250895cf86598aeb074c.gif)
